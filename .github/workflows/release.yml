# Publish release and upload Tauri build artifacts for multiple platforms
name: 'publish'

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-22.04
    outputs:
      release_id: ${{ steps.create_release.outputs.release_id }}
      release_tag: ${{ steps.create_release.outputs.release_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub release (draft) and output release id
        id: create_release
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            // Get the tag name robustly
            const envRef = process.env.GITHUB_REF || '';
            const refName = process.env.GITHUB_REF_NAME || (envRef.replace(/^refs\/(tags|heads)\//, '') || '');

            if (!refName) {
              core.setFailed('Tag name not available in GITHUB_REF / GITHUB_REF_NAME; cannot create release.');
              return;
            }

            // Create the release (draft)
            const createRes = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: refName,
              name: `App ${refName}`,
              body: 'See the assets to download this version and install.',
              draft: true,
              prerelease: false
            });

            const releaseId = createRes.data.id;
            core.info(`Created release id=${releaseId} tag=${createRes.data.tag_name}`);

            // Export step outputs (write to GITHUB_OUTPUT)
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `release_id=${releaseId}\n`);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `release_tag=${refName}\n`);

  publish-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
          - platform: 'windows-latest'
            args: '--target aarch64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Rust target for Windows ARM64
        if: matrix.args == '--target aarch64-pc-windows-msvc'
        run: rustup target add aarch64-pc-windows-msvc

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: npm install

      - name: Build and upload artifacts using Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    needs: [create-release, publish-tauri]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Publish GitHub release (clear draft)
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const releaseId = Number(process.env.RELEASE_ID);
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              draft: false
            });
            
            core.info(`Published release with ID ${releaseId}`);